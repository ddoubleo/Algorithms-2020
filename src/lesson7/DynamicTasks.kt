@file:Suppress("UNUSED_PARAMETER")

package lesson7

import java.lang.StringBuilder
import kotlin.math.max


/**
 * Наибольшая общая подпоследовательность.
 * Средняя
 *
 * Дано две строки, например "nematode knowledge" и "empty bottle".
 * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
 * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
 * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
 * Если общей подпоследовательности нет, вернуть пустую строку.
 * Если есть несколько самых длинных общих подпоследовательностей, вернуть любую из них.
 * При сравнении подстрок, регистр символов *имеет* значение.
 */

// Время О(mn)
// Память О(mn)

fun longestCommonSubSequence(first: String, second: String): String {
    if (first.isEmpty() or second.isEmpty()) return ""
    var m = first.length
    var n = second.length
    val l = Array(m + 1) { IntArray(n + 1) }
    for (i in 0..m) {
        for (j in 0..n) {
            if (i == 0 || j == 0) l[i][j] = 0
            else if (first[i - 1] == second[j - 1]) l[i][j] = l[i - 1][j - 1] + 1
            else l[i][j] = max(l[i - 1][j], l[i][j - 1])
        }
    }
    var index = l[m][n]
    val lcs = CharArray(l[m][n])
    while (m > 0 && n > 0) {
        when {
            first[m - 1] == second[n - 1] -> {
                lcs[index - 1] = first[m - 1]
                m--
                n--
                index--
            }
            l[m - 1][n] > l[m][n - 1] -> m--
            else -> n--
        }
    }
    return lcs.joinToString("")
}

/**
 * Наибольшая возрастающая подпоследовательность
 * Сложная
 *
 * Дан список целых чисел, например, [2 8 5 9 12 6].
 * Найти в нём самую длинную возрастающую подпоследовательность.
 * Элементы подпоследовательности не обязаны идти подряд,
 * но должны быть расположены в исходном списке в том же порядке.
 * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
 * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
 * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
 */

// Время О(n^2) Там еще по идее как-то за O(n log n) сделать, но меня пока только на такое хватило
// Память О(n)


fun longestIncreasingSubSequence(list: List<Int>): List<Int> {
    val size = list.size
    val lis = MutableList(size) { 1 }
    val prev = MutableList(size) { -1 }
    for (i in 0 until size) {
        for (j in 0 until i) {
            if (list[i] > list[j] && lis[i] < lis[j] + 1) {
                lis[i] = lis[j] + 1
                prev[i] = j
            }
        }
    }
    val length = lis.max()
    var index = lis.indexOf(length)

    val result = mutableListOf<Int>()
    while (index != -1) {
        result.add(0, list[index])
        index = prev[index]
    }
    return result

}


/**
 * Самый короткий маршрут на прямоугольном поле.
 * Средняя
 *
 * В файле с именем inputName задано прямоугольное поле:
 *
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
 *
 * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
 * В каждой клетке записано некоторое натуральное число или нуль.
 * Необходимо попасть из верхней левой клетки в правую нижнюю.
 * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
 * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
 *
 * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
 */
fun shortestPathOnField(inputName: String): Int {
    TODO()
}

// Задачу "Максимальное независимое множество вершин в графе без циклов"
// смотрите в уроке 5